% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prepare_input_regions.R
\name{prepare_input_regions}
\alias{prepare_input_regions}
\title{Prepare input data for peakCombiner package}
\usage{
prepare_input_regions(data, show_messages = TRUE)
}
\arguments{
\item{data}{Data frame or GRanges object with the input data. Several
formats are accepted, which are described in full in the Details below.
\itemize{
\item in memory data frame listing each sample's peak file location,
\item in memory data frame listing the peaks themselves that are found in each
sample, or
\item in memory GRanges object listing the peaks themselves that are found in
each sample.
}}

\item{show_messages}{Logical value of TRUE (default) or FALSE. Defines if
info messages are displayed or not.}
}
\value{
A tibble with the columns \code{chrom}, \code{start}, \code{end}, \code{name}, \code{score},
\code{strand}, \code{center}, \code{sample_name}. The definitions of these columns are
described in full in the Details below. Use as input for functions
\code{\link[=center_expand_regions]{center_expand_regions()}}, \code{\link[=filter_regions]{filter_regions()}} and
\code{\link[=combine_regions]{combine_regions()}}.
}
\description{
\link{prepare_input_regions} prepares the input data in the format
needed for all of the following steps within peakCombiner. It accepts the
following formats:
\itemize{
\item in memory data frame listing each sample's peak file location,
\item in memory data frame listing the peaks themselves that are found in each
sample, or
\item in memory GRanges object listing the peaks themselves that are found in
each sample.
}
}
\details{
Accepted inputs are one of the three following options:
\enumerate{
\item In memory data frame listing each sample's peak file location
\itemize{
\item \code{sample_name} -  Unique name for each sample
(required).
\item \code{path_peaks} -   Path to the file in which the genomic regions are
stored. For example, the path to a bed file or
\code{.narrowPeak} file (required).
\item \code{file_format} -  The expected file format. Needed to correctly label the
columns of the input. Acceptable values are:
\code{bed}, \code{narrowPeak}, and \code{broadPeak} (required).
\item \code{score_column} - The number of the column having the
the metric used to rank peak importance, where bigger
values are more important. If not provided,
column 9 will be used for \code{.narrowPeak} or
\code{.broadPeak} file formats. Column 9 corresponds to
the \code{qValue} as described in the UCSC documentation
\href{https://genome.ucsc.edu/FAQ/FAQformat.html#format12}{here}.
Other alternatives for \code{narrowPeak} or \code{broadPeak}
could be columns 7 or 8, which correspond to
\code{signalValue} or \code{pValue} (optional).
}
\item In memory data frame listing the peaks themselves that are found in each
sample. The columns can be provided in any order and have the following
names. Note that additional columns will be dropped.
\itemize{
\item \code{chrom} - chromosome name (required).
\item \code{start} - start coordinate of range (1-based coordinate system,
NOT like bed files which are 0-based) (required).
\item \code{end} -   end coordinate of range (required).
\item \code{sample_name} - unique identifier for a sample. No restrictions on
characters (required).
\item \code{score} - the metric used to rank peak importance, where bigger values
are more important. For example, qValue from Macs2,
-log10FDR from another method, or fold enrichment over
background computed from your favorite method. If not
provided, defaults to 0 (optional).
\item \code{strand} - values are '+', '-', or '.'. If not provided, defaults to '.'
(optional).
\item \code{summit} - distance of the strongest signal ("summit") of the peak
region from the start coordinate (optional).
}
\item In memory GRanges object listing the peaks themselves that are found in
each sample. This object is very similar to the data frame above,
except that \code{chrom}, \code{start}, and \code{end} are instead described using
the \code{GRanges} nomenclature. Note that additional columns will be dropped.
}

This function parses the inputs provided and returns a data frame having the
columns listed below.
\itemize{
\item \code{chrom} -        chromosome name
\item \code{start} -        start coordinate of range (1-based coordinate system,
NOT like bed files which are 0-based)
\item \code{end} -          end coordinate of range
\item \code{name} -         unique identifier for a region. auto-generated by this
function
\item \code{score} -        the metric used to rank peak importance, where bigger
values are more important. For example, qValue from MACS2,
-log10FDR from another method, or fold enrichment over
background computed from your favorite method
\item \code{strand} -       values are '+', '-', or '.'. Chromatin data are typically
non- stranded so will have a '.'.
\item \code{center} -       absolute genomic coordinate of the nucleotide at the
center of the peak region, or alternatively the strongest
signal ("summit") of the peak region. If no value is
provided by the user, \code{center} defaults to the arithmetic
center of the peak region.
\item \code{sample_name} -  unique identifier for a sample. No restrictions on
characters
}

In addition, input data is checked for mutliple entries of the same genomic
region. This can occure when using called peak files as multiple summits can
be annotated within the sqme genomic regions (defined by \code{chrom}, \code{start}
and \code{end}). To avoid mutliple entries, this script is checking the input for
multiple summits within the same regions and maintains only the strongest
enriched (based on the values in the column \code{score}). This step is mantory
to quaranty an optimal result.
}
\examples{
#Load in and prepare a an accepted tibble
input_data <- peakCombiner::syn_data_tibble
input_data

data_prepared <- prepare_input_regions(
  data = input_data,
  show_messages = TRUE
)
data_prepared

# Or a pre-loaded tibble with genomic regions and named columns.

control <- peakCombiner::syn_data_control01
treatment <- peakCombiner::syn_data_treatment01

combined_input <- control |>
  dplyr::mutate(sample_name = "control-rep1") |>
  rbind(treatment |>
    dplyr::mutate(sample_name = "treatment-rep1"))

prepare_input_regions(
  data = combined_input,
  show_messages = FALSE
)

}
